/*!
 * SWIF-OpenSTC
 * Copyright 2013-2014 Siclic <contact@siclic.fr>
 * Licensed under AGPL-3.0 (https://www.gnu.org/licenses/agpl.txt)
 */

define(['app',
		'appHelpers',
		'contractModel',
		'contractsCollection',
		'advancedSelectBoxView',
		
		'moment',
		'moment-timezone-data',
		'bsTimepicker',
		'bsDatepicker-lang',
		'bsSwitch'
		

], function (app, AppHelpers, ContractModel, ContractsCollection, AdvancedSelectBoxView, moment) {

	'use strict';

	/******************************************
	* Contract Form View
	*/
	var FormContractView = Backbone.View.extend({

		el          : '#rowContainer',

		templateHTML: '/templates/forms/form_contract.html',
		
		templatesBinding: {moment: moment},
		
		// The DOM events //
		events: {

			//Form Buttons
		},
		/**
		 *@param id: id of Booking to route to
		 *@return: url to call to go to specified Booking (or to create new Booking if id is not set)
		*/
		urlBuilder: function(id){
			var url = _.strLeft(app.routes.contrat.url, '(');
			var params = '';
			if(!_.isUndefined(id)){
				params = 'id/' + id.toString();
			}
			return _.join('/','#' + url, params);
		},
		
		/**
		 * Method used to render form according to field definitions
		 */
		renderFormComponents: function(){
			var deferred = $.Deferred();
			var arrayDeferred = [];
			var self = this;
			$(this.el).find('.field').each(function(){
				var field = $(this).data('fieldname');
				var fieldLabel = $(this).data('fieldlabel');
				if(_.has(self.model.collection.fieldsMetadata,field)){
					var elt = self.model.collection.fieldsMetadata[field];
					if(_.has(self.formFieldParser,elt.type)){
						//all is correctly set on html markup, now load the tempalte html and parse it to render the component
						var dom = $(this);
						var parser = self.formFieldParser[elt.type];
						arrayDeferred.push(parser({
							field:{
								key: field, 
								label: fieldLabel,
								value: self.model.getAttribute(field,''),
								definition: elt
								}
						}));
					}
					else{
						console.warn('Swif Error: Unrecognized field type "' + elt.type.toString() + '", authorized values are : "' + _.keys(self.formFieldParser));
					}
				}
				else{
					console.warn('Swif Error: "' + field + '" not present on Collection, authorized values are : "' + _.keys(self.model.collection.fieldsMetadata));
				}
			});
			return $.when.apply($,arrayDeferred);
		},
		
		/**
		 * compute OpenERP domain to an objectified domain (field: ..., operator: ..., value: ...)
		 */
		computeSearchparams: function(domain){
			var ret = [];
			_.each(domain, function(item){
				if(_.isArray(item) && item.length == 3){
					ret.push({field: item[0], operator: item[1], value: item[2]});
				}
				else{
					ret.push(item);
				}
			});
			return ret;
		},
		
		renderAdvancedSelectBox: function(field){
			var select = new AdvancedSelectBoxView({field: field, template: true});
			var domain = $(this).attr('data-domain');
			if(domain){
				select.resetSearchParams();
				select.searchParams = domain;
			}
			select.render();
		},
		
		renderSimpleField: function(parser, field){
			return $.get(parser, function(template){
				dom.html(_.template(template, _.extend(self.templatesBinding,{
					field:field})));
			});
		}
		
		/** View Initialization
		*/
		initialize : function(params) {
			this.options = params;
			var self = this;
			this.formFieldParser = {
				char	: function(opt): self.renderSimpleField(app.menus.openpatrimoine + '/templates/form_components/input.html', opt),
				text	: function(opt): self.renderSimpleField(app.menus.openpatrimoine + '/templates/form_components/inputNote.html', opt),
				integer	: function(opt): self.renderSimpleField(app.menus.openpatrimoine + '/templates/form_components/inputNumber.html', opt),
				float	: function(opt): self.renderSimpleField(app.menus.openpatrimoine + '/templates/form_components/inputNumber.html', opt),
				date	: function(opt): self.renderSimpleField(app.menus.openpatrimoine + '/templates/form_components/inputDate.html', opt),
				selection: function(opt): self.renderSimpleField(app.menus.openpatrimoine + '/templates/form_components/inputList.html', opt),
				
			}
			this.initModel().done(function(){
				app.router.render(self);
			});
		},
		
		/** Display the view
		*/
		render: function(loader) {

			var pageTitle = '';
			if(_.isNull(this.model.getId())) {
				pageTitle = app.lang.patrimoine.viewsTitles.newContract;
			}
			else{
				pageTitle = app.lang.patrimoine.viewsTitles.contractDetails +' '+ this.model.getId();
			}
			// Change the page title //
			app.router.setPageTitle(pageTitle);

			var self = this;
			// Retrieve the template //
			$.get(app.menus.openpatrimoine + this.templateHTML, function(templateData){
				//compute dates with user TZ

				var template = _.template(templateData, {
					lang   		: app.lang,
					pageTitle	: pageTitle,
					readonly	: false,
					moment		: moment,
					user		: app.current_user
				});

				$(self.el).html(template);
				self.renderFormComponents().always(function(){
					self.renderAdvancedSelectBoxes();
					$(".datepicker").datepicker({ format: 'dd/mm/yyyy',	weekStart: 1, autoclose: true, language: 'fr' });
				});
				$(this.el).hide().fadeIn('slow');
			});
			return this;
		},
		
		/**
		 * Initialize model, fetch its data (if id is set on url) and perform a HEAD request to have fields definitions
		 */
		initModel: function(){
			var arrayDeferred = [];
			if(_.isUndefined(this.options.id)){
				this.model = new ContractModel();
			}
			else{
				this.model = new ContractModel({id:this.options.id});
				arrayDeferred.push(this.model.fetch());
			}
			//perform a head request to retrieve metadaFields
			this.model.collection = new ContractsCollection();
			arrayDeferred.push	(this.model.collection.count());
			return $.when.apply($, arrayDeferred);

		}
	});
	return FormContractView;
})